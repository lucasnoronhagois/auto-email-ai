version: '3.8'

services:
  # Banco de dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: autou_postgres
    environment:
      POSTGRES_DB: autou_db
      POSTGRES_USER: autou_user
      POSTGRES_PASSWORD: autou_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - autou_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U autou_user -d autou_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: autou_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - autou_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: autou_backend
    environment:
      - DATABASE_URL=postgresql://autou_user:autou_password@postgres:5432/autou_db
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=production
      - HOST=0.0.0.0
      - PORT=8000
      - DEBUG=False
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - autou_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React (Nginx)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: autou_frontend
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - autou_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # pgAdmin - Interface Web para PostgreSQL
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: autou_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@autou.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - autou_network
    restart: unless-stopped
    volumes:
      - pgadmin_data:/var/lib/pgadmin

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:

networks:
  autou_network:
    driver: bridge
